name: 'auto-build-ios'
description: 'Builds and uploads the iOS application'
inputs:
  path-to-control-file:
    description: 'The TSX file that holds the version-string and build number for Android'
    required: true
    default: constants.tsx

  name-of-version-string:
    description: 'The name of the version-string variable on the TSX file'
    required: true
    default: PUBLIC_VERSION

  name-of-version-placeholder:
    description: 'Tha placeholder value for the Version String'
    required: true
    default: "Interna"

  name-of-build-string:
    description: 'The name of the build version variable on the TSX file'
    required: true
    default: BUILD_IOS

  appstore-api-key-id:
    description: "The app store key id"
    required: true

  appstore-api-issuer-id:
    description: "The app store api issuer"
    required: true

  apple-id: 
    description: "The ID associated with the APP"
    required: true

  bundle-id:
    description: "The APP bundle ID"
    required: true
    
  java-version:
    description: 'Java version to use'
    required: true
    default: '21'

  node-version:
    description: 'Node version to use'
    required: true
    default: 20


runs:
  using: "composite"
  steps:
    - name: Install GNU grep
      shell: bash
      run: brew install grep

    - name: Check if version and build string are present on control-file. Locally change version string to tag
      shell: bash
      run: |
        if [ $(ggrep -oP "${{inputs.name-of-version-string}} = 'Versión\s*\K[^';]+" ${{ inputs.path-to-control-file }}) ]; then echo "Version string present!"; else exit 1; fi
        if [ $(ggrep -oP '${{ inputs.name-of-build-string }} = \s*\K\d+' ${{ inputs.path-to-control-file }}) ]; then echo "Build number present!"; else exit 1; fi

    - name: Setup Node.js
      uses: actions/setup-node@v4.2.0
      with:
        node-version: ${{inputs.node-version}}

    - name: Setup Ionic
      shell: bash
      run: npm install -g @ionic/cli

    - name: Install APP dependencies
      shell: bash
      run: npm install

    - name: Build the app
      shell: bash
      env:
        CI: ""
      run: |
        echo "Building the app ..."
        ionic --max_old_space_size=2048 build 

    - name: Build the iOS app
      shell: bash
      env:
        CI: false
      run: |
        echo "Building the iOS app"
        if [ ! -d "ios" ]; then
          npx cap add ios
        fi
        npx cap sync ios

    - name: Generate the resources
      shell: bash
      run: npx @capacitor/assets generate --ios

    - name: Handle pods
      shell: bash
      working-directory: ./ios/App/
      run: |
        echo "Deintegrating pods ..."
        pod deintegrate
        echo "Rebuilding pods ..."
        pod install

    - name: Update xcode project
      shell: bash
      run: |
        python ${{github.action_path}}/scripts/BuildHandler.py --constants-file ${{inputs.path-to-control-file}} --version-var ${{inputs.name-of-version-string}} --build-var ${{inputs.name-of-build-string}} --build-file ios/App/App.xcodeproj/project.pbxproj
        cat ios/App/App.xcodeproj/project.pbxproj

    - name: Build the app with XCode
      shell: bash
      run: xcodebuild -workspace './ios/App/App.xcworkspace' -scheme App -destination generic/platform=iOS -archivePath App.xcarchive archive

    - name: Assemble IPA
      shell: bash
      run: xcodebuild -exportArchive -archivePath App.xcarchive -exportOptionsPlist ./ios/App/export.plist -exportPath output -allowProvisioningUpdates

    - name: Setup bundle version and bundle short version
      id: bundles
      shell: bash
      run: |
        echo "BUNDLE_VERSION=$(ggrep -oP '${{ inputs.name-of-build-string }} = \s*\K\d+' ${{ inputs.path-to-control-file }})" >> "$GITHUB_OUTPUT"
        echo "BUNDLE_SHORT_VERSION=$(ggrep -oP "${{inputs.name-of-version-string}} = 'Versión\s*\K[^';]+" ${{ inputs.path-to-control-file }})" >> "$GITHUB_OUTPUT"


    - name: Upload to testfligh
      shell: bash
      run: |
        echo "Starting upload"
        ls ~/private_keys
        xcrun altool --validate-app -f output/App.ipa -t ios --apiKey ${{ inputs.appstore-api-key-id }} --apiIssuer ${{ inputs.appstore-api-issuer-id }}
        xcrun altool --upload-package output/App.ipa -t ios --apiKey ${{ inputs.appstore-api-key-id }} --apiIssuer ${{ inputs.appstore-api-issuer-id }} --apple-id ${{inputs.apple-id}} --bundle-id ${{inputs.bundle-id}} --bundle-version ${{steps.bundles.outputs.BUNDLE_VERSION}} --bundle-short-version-string ${{steps.bundles.outputs.BUNDLE_SHORT_VERSION}}
